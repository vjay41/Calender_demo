import pytest
import psutil
from unittest.mock import patch, Mock
from your_module import already_running  # Replace 'your_module' with the actual module name

@pytest.fixture
def mock_process_iter():
    """Fixture to mock psutil.process_iter for testing."""
    def _mock_process_iter(mocked_processes):
        # Patch psutil.process_iter to return the mocked processes
        with patch('psutil.process_iter', return_value=mocked_processes):
            yield
    return _mock_process_iter

def test_already_running_found(mock_process_iter):
    # Mock a process that includes the command line argument
    mocked_process = Mock()
    mocked_process.info = {'pid': 1234, 'cmdline': ['python', 'script.py']}
    
    # Use the fixture to simulate the process list
    with mock_process_iter([mocked_process]):
        assert already_running('script.py') is True

def test_already_running_not_found(mock_process_iter):
    # Mock a process that does NOT include the command line argument
    mocked_process = Mock()
    mocked_process.info = {'pid': 5678, 'cmdline': ['python', 'another_script.py']}
    
    # Use the fixture to simulate the process list
    with mock_process_iter([mocked_process]):
        assert already_running('non_existent_script.py') is False

def test_already_running_empty_cmdline(mock_process_iter):
    # Mock a process with an empty cmdline (which can occur in some cases)
    mocked_process = Mock()
    mocked_process.info = {'pid': 9999, 'cmdline': []}
    
    # Use the fixture to simulate the process list
    with mock_process_iter([mocked_process]):
        assert already_running('script.py') is False

def test_already_running_access_denied(mock_process_iter):
    # Mock a process that raises AccessDenied exception
    mocked_process = Mock()
    mocked_process.info = {'pid': 8888, 'cmdline': ['restricted_process']}
    
    # Raise an AccessDenied exception during the iteration
    with patch('psutil.process_iter', side_effect=psutil.AccessDenied):
        assert already_running('restricted_process') is False
